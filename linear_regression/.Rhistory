summary(cars)
plot(pressure)
}
library(xts)
library(quantmod)
library(xts)
install.packages('quantmod')
install.packages('xts')
install.packages('xts')
install.packages('xts')
install.packages('quantmod')
library(xts)
library(quantmod)
prices <- getSymbols("GOOG", auto.assign = FALSE)
move <- Cl(last(prices)) - Op(last(prices))
ifelse(move > 0, "BUY", "SELL")
chartSeries(prices, theme = chartTheme("white", bg.col = "white"))
as.data.frame(prices)[1:5 , 1:4]
install.packages('xts')
install.packages('quantmod')
library(xts)
library(quantmod)
prices <- getSymbols("GOOG", auto.assign = FALSE)
move <- Cl(last(prices)) - Op(last(prices))
ifelse(move > 0, "BUY", "SELL")
chartSeries(prices, theme = chartTheme("white", bg.col = "white"))
as.data.frame(prices)[1:5 , 1:4]
install.packages("xts")
install.packages("quantmod")
---
output: html_document
params:
symbol: AMZN
---
# `r params$symbol`
```{r echo=FALSE, message=FALSE}
# set up
library(xts)
library(quantmod)
prices <- getSymbols(params$symbol, auto.assign = FALSE)
move <- Cl(last(prices)) - Op(last(prices))
```
## Recommendation: `r ifelse(move > 0, "BUY", "SELL")`
`r params$symbol` will `r ifelse(move > 0, "increase", "decrease")` in price during the next trading period.
## Price History
The chart below is made with the `quantmod` R package, a widely used package for collecting and visualizing financial data in R. You can learn more about `quantmod` at the website [www.quantmod.com](rstudio.github.io/DT/).
***
```{r echo=FALSE}
chartSeries(prices, theme = chartTheme("white", bg.col = "white"))
```
## Method
This forecast was predicted with the *recency algorithm*, a simple---probably useless---method for determining stock prices. The recency algorithm predicts that the next price movement, $M_{j}$, will be in the same direction as the most recent price movement. $M_{i}$.
$$M_{i}= Close_{i} - Open_{i}$$
$$
M_{j}=
\begin{cases}
> 0,              & \text{if } M_{i} > 0\\
\leq 0,              & \text{if } M_{i}\leq 0
\end{cases}
$$
## Raw Data
The table below displays the daily price data for the stock. In the next section, we will learn how to make a concise, interactive table with the `DT` package, a new package for making searchable data tables. You can learn more about the `DT` package at the website [rstudio.github.io/DT/](rstudio.github.io/DT/).
***
```{r echo=FALSE, comment=''}
as.data.frame(prices)[1:5 , 1:4]
```
?pnorm
pnorm(59.35, 45, 5)-pnorm(37,45,5)
pnorm(20.53,21.25,2)-pnorm(19.63,21.25,2)
pnorm(115.5, 105, 7) - pnorm(94.5, 105, 7)
pnorm(25, 21.02,2)-pnorm(17.02, 21.02, 2)
pnorm(118, 105, 5)-pnorm(114, 105, 5)
pnorm(20.6, 20.6,2)-pnorm(18, 20.6,2)
pnorm(86.05, 76.55, 5)-pnorm(79, 76.55, 5)
?split
getwd
getwd()
setwd("~/R-Springboard/Exercise7")
NBA = read.csv("NBA_train.csv")
str(NBA)
NBA$PTSdiff = NBA$PTS - NBA$oppPTS
WinsReg = lm(W ~ PTSdiff, data = NBA)
summary(WinsReg)
PointsReg = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV, STL + BLK, data = NBA)
summary(PointsReg)
PointsReg = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data = NBA)
summary(PointsReg)
PointsReg$residuals
SSE = sum(PointsReg$residuals)^2
SSE = sum(PointsReg$residuals^2)
RMSE = sqrt(SSE/nrow(NBA))
RMSE
mean(NBA$PTS)
PointsReg2 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + STL + BLK, data = NBA)
summary(PointsReg2)
PointsReg3 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL + BLK, data = NBA)
summary(PointsReg3
)
PointsReg4 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL, data = NBA)
summary(PointsReg4)
SSE = sum(PointsReg4$residuals^2)
SSE
RMSE4 = sqrt(SSE/nrow(NBA))
RMSE4
NBA_test = read.csv("NBA_test.csv")
PointsPrediction = predict(PointsReg4, newdata = NBA_test)
SSE = sum((PointsPredictions - NBA_test$PTS)^2)
SSE = sum((PointsPrediction - NBA_test$PTS)^2)
SST = sum((mean(NBA$PTS) - NBA_test$PTS)^2)
R2 = 1 - SSE/SST
R2
RMSE = sqrt(SSE/nrows(NBA_test))
RMSE = sqrt(SSE/nrow(NBA_test))
RMSE
setwd("C:\\Users\\casch\\Documents\\R-Springboard\\linear_regression\\")
library(ggplot2)
states.data <- readRDS("dataSets/states.rds")
summary(states.data)
cor(states.data$energy, states.data$metro)
cor(states.data)
cor(states.data$energy states.data$metro)
cor(states.data$energy, states.data$metro)
cor(states.data$expense, states.data$csat)
str(states.data)
cor(states.data$expense, states.data$csat, na.rm = TRUE)
cor(states.data$expense, states.data$csat, use = "complete.obs")
ggplot(states.data, aes(x = energy, y = metro)) + geom_point()
per_cap_energy <- lm(energy ~ metro, data=states.data)
summary(per_cap_energy)
cor(states.data, use = "complete.obs")
states.data$income, use = "complete.obs")
cor(states.data$pop, states.data$area, states.data$density, states.data$metro, states.data$waste, states.data$energy, states.data$toxic, states.data$green, states.data$income, use = "complete.obs")
cov(states.data$pop, states.data$area, states.data$density, states.data$metro, states.data$waste, states.data$energy, states.data$toxic, states.data$green, states.data$income, use = "complete.obs")
cor(c(states.data$pop, states.data$area, states.data$density, states.data$metro, states.data$waste, states.data$energy, states.data$toxic, states.data$green, states.data$income), use = "complete.obs")
cor(states.data$energy, states.data$metro, use = "complete.obs")
per_cap_energy2 <- lm(energy ~ metro + waste, data=states.data)
summary(per_cap_energy2)
per_cap_energy
summary(per_cap_energy)
states.data
summary(states.data)
str(stats.data)
str(states.data)
states.info
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
states.info
per_cap_energy2 <- lm(energy ~ metro + density, data=states.data)
summary(per_cap_energy2)
per_cap_energy3 <- lm(energy ~ metro + density, data=states.data)
summary(per_cap_energy3)
per_cap_energy3 <- lm(energy ~ metro + income, data=states.data)
summary(per_cap_energy4)
per_cap_energy4 <- lm(energy ~ metro + income, data=states.data)
summary(per_cap_energy4)
per_cap_energy2 <- lm(energy ~ metro + density + miles + income, data=states.data)
summary(per_cap_energy2)
summary(per_cap_energy2)
per_cap_energy2 <- lm(energy ~ metro + density + miles + income + pop + area + waste + miles + green, data=states.data)
summary(per_cap_energy2)
per_cap_energy3 <- lm(energy ~ metro + density + miles + income + area + waste + miles + green, data=states.data)
summary(per_cap_energy3)
per_cap_energy4 <- lm(energy ~ metro + miles + income + area + waste + miles + green, data=states.data)
summary(per_cap_energy4)
per_cap_energy5 <- lm(energy ~ metro + miles + income + waste + miles + green, data=states.data)
summary(per_cap_energy5)
per_cap_energy6 <- lm(energy ~ metro + miles + income + miles + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy2 <- lm(energy ~ metro + density + miles + income + pop + area + waste + green, data=states.data)
summary(per_cap_energy2)
per_cap_energy3 <- lm(energy ~ metro + density + miles + income + area + waste + green, data=states.data)
summary(per_cap_energy3)
per_cap_energy4 <- lm(energy ~ metro + miles + income + area + waste + green, data=states.data)
summary(per_cap_energy4)
per_cap_energy5 <- lm(energy ~ metro + miles + income + waste + green, data=states.data)
summary(per_cap_energy5)
per_cap_energy7 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy7)
per_cap_energy8 <- lm(energy ~ income + green, data=states.data)
summary(per_cap_energy8)
per_cap_energy8 <- lm(energy ~ State + income + green, data=states.data)
per_cap_energy8 <- lm(energy ~ state + income + green, data=states.data)
summary(per_cap_energy8)
per_cap_energy2 <- lm(energy ~ metro + density + miles + income + pop + green, data=states.data)
summary(per_cap_energy2)
per_cap_energy3 <- lm(energy ~ metro + density + miles + income + green, data=states.data)
summary(per_cap_energy3)
per_cap_energy4 <- lm(energy ~ metro + miles + income + green, data=states.data)
summary(per_cap_energy4)
per_cap_energy5 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy5)
per_cap_energy4 <- lm(energy ~ metro + miles + income + green, data=states.data)
summary(per_cap_energy4)
per_cap_energy6 <- lm(energy ~ miles + income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  miles + income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  miles + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + miles + income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro*miles + income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + miles + income + green, green*miles, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + miles + income + green, green*miles, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + miles + income + green, green*miles, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~  metro + miles + income + green, green*miles, data=states.data)
per_cap_energy6 <- lm(energy ~  metro + miles + income + green + green*miles, data=states.data)
summary(per_cap_energy6)
per_cap_energy5 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy5)
cor(states.data$energy, states.data$metro, use = "complete.obs")
cor(states.data, use = "complete.obs")
##   2. Try adding region to the model. Are there significant differences
str(states.data)
cor(states.data$metro, states.data$income, use = "complete.obs")
cor(states.data$metro, states.data$green, use = "complete.obs")
cor(states.data$green, states.data$income, use = "complete.obs")
per_cap_energy6 <- lm(energy ~ metro + income + metro*income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy5 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy5)
per_cap_energy7 <- lm(energy ~ income + green, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ metro + income + metro*income + green + region, data=states.data)
summary(per_cap_energy7)
per_cap_energy5 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy5)
per_cap_energy4 <- lm(energy ~ metro + miles + income + green, data=states.data)
summary(per_cap_energy4)
per_cap_energy5 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy5)
per_cap_energy10 <- lm(energy ~ metro + income + green, data=states.data)
summary(per_cap_energy10)
per_cap_energy10 <- lm(energy ~ income + green, data=states.data)
summary(per_cap_energy10)
per_cap_energy10 <- lm(energy ~ metro + green, data=states.data)
summary(per_cap_energy10)
per_cap_energy10 <- lm(energy ~ metro + income, data=states.data)
summary(per_cap_energy10)
str(states.data$region)
states.data$region <- factor(states.data$region)
str(states.data$region)
states.data$region <- factor(states.data$region)
#Add region to the model
sat.region <- lm(csat ~ region,
data=states.data)
#Show the results
coef(summary(sat.region)) # show regression coefficients table
anova(sat.region) # show ANOVA table
##   Again, *make sure to tell R which variable
per_cap_energy7<- lm(energy ~ metro + income + metro*income + green + region, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ income + metro*income + green + region, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ income + green + region, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ income + metro + green + region, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ income + metro + green + region + metro*region, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ income + metro + green + region + region*income, data=states.data)
summary(per_cap_energy7)
per_cap_energy7<- lm(energy ~ income + metro + metro*income + green + region, data=states.data)
summary(per_cap_energy7)
per_cap_energy6 <- lm(energy ~ metro + income + green + green*income, data=states.data)
summary(per_cap_energy6)
per_cap_energy6 <- lm(energy ~ metro + income + metro*income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy10 <- lm(energy ~ metro + income + metro*income + green, data=states.data)
summary(per_cap_energy10)
per_cap_energy6 <- lm(energy ~ metro + income + metro*income + green, data=states.data)
summary(per_cap_energy6)
per_cap_energy10 <- lm(energy ~ metro + income + metro*green + green, data=states.data)
summary(per_cap_energy10)
per_cap_energy7<- lm(energy ~ income + metro + metro*green + green + region, data=states.data)
summary(per_cap_energy7)
